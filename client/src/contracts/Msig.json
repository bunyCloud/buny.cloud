{
  "address": "0x87A04FDe2aC7fA3404a3058Ae95C427EFEf4a2E7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "deleteTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSignatures",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFunds",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "signTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "TransactionSigned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [],
      "name": "contractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingTransactions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingTimeForTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSignatures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9e1e82c26df45c9dedeac7a21571d3721e32045088161b095f1aea067e0fd1e",
  "receipt": {
    "to": null,
    "from": "0x8406A51A0E1B5F52Ff61226773e6328e5Da5d964",
    "contractAddress": "0x1032898e405fB559D0Ae36948C845525a2325b19",
    "transactionIndex": 0,
    "gasUsed": "1454634",
    "logsBloom": "0x
    "blockHash": "0x863ce266e61e0d18344507bb0538ed40ce52ee8f75c34133fc4e497ce4d4f9e9",
    "transactionHash": "0xb9e1e82c26df45c9dedeac7a21571d3721e32045088161b095f1aea067e0fd1e",
    "logs": [],
    "blockNumber": 255395314,
    "cumulativeGasUsed": "1454634",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "66382d972e9daf883b963087d31955be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"deleteTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingTransactions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Msig.sol\":\"Msig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Msig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Msig {\\r\\n\\r\\n    string public contractName = \\\"Multi Signature Portal\\\";\\r\\n    address private _owner;\\r\\n    mapping(address => uint8) private _owners;\\r\\n    uint constant MIN_SIGNATURES = 2;\\r\\n    uint private _transactionIdx;\\r\\n    address[] private _allOwners;\\r\\n\\r\\n    struct Transaction {\\r\\n        address from;\\r\\n        address to;\\r\\n        uint amount;\\r\\n        uint8 signatureCount;\\r\\n        mapping (address => uint8) signatures;\\r\\n    }\\r\\n\\r\\n    mapping (uint => Transaction) private _transactions;\\r\\n    uint[] private _pendingTransactions;\\r\\n    \\r\\n    modifier isOwner() {\\r\\n        require(msg.sender == _owner, \\\"Not an owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validOwner() {\\r\\n        require(msg.sender == _owner || _owners[msg.sender] == 1, \\\"Not a valid owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    event DepositFunds(address from, uint amount);\\r\\n    event WithdrawFunds(address from, uint amount);\\r\\n    event TransferFunds(address from, address to, uint amount);\\r\\n    event TransactionCreated(address from, address to, uint amount, uint transactionId);\\r\\n    event TransactionCompleted(address from, address to, uint amount, uint transactionId);\\r\\n    event TransactionSigned(address by, uint transactionId);\\r\\n    \\r\\n  constructor() {\\r\\n    _owner = msg.sender;\\r\\n    _owners[_owner] = 1; // Add the deployer's address to the _owners mapping.\\r\\n    _allOwners.push(_owner); // Add the deployer's address to the _allOwners array.\\r\\n}\\r\\n\\r\\n    \\r\\n   function addOwner(address owner) \\r\\n    isOwner \\r\\n    public {\\r\\n    require(_owners[owner] == 0, \\\"Address is already an owner\\\");\\r\\n    _owners[owner] = 1;\\r\\n    _allOwners.push(owner);\\r\\n}\\r\\n\\r\\n    \\r\\n   function removeOwner(address owner)\\r\\n    isOwner\\r\\n    public {\\r\\n    require(_owners[owner] == 1, \\\"Address is not an owner\\\");\\r\\n    _owners[owner] = 0;\\r\\n\\r\\n    // Remove the owner from _allOwners array\\r\\n    for (uint i = 0; i < _allOwners.length; i++) {\\r\\n        if (_allOwners[i] == owner) {\\r\\n            _allOwners[i] = _allOwners[_allOwners.length - 1];\\r\\n            _allOwners.pop();\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getAllOwners() \\r\\n    public \\r\\n    view \\r\\n    returns (address[] memory) {\\r\\n    return _allOwners;\\r\\n}\\r\\n\\r\\n\\r\\n    receive() external payable {\\r\\n        emit DepositFunds(msg.sender, msg.value);\\r\\n    }\\r\\n    \\r\\n  function transferTo(address to, uint amount)\\r\\n    validOwner\\r\\n    public {\\r\\n    require(address(this).balance >= amount, \\\"Insufficient balance\\\");\\r\\n    \\r\\n    uint transactionId = _transactionIdx++;\\r\\n    \\r\\n    Transaction storage transaction = _transactions[transactionId];\\r\\n    transaction.from = msg.sender;\\r\\n    transaction.to = to;\\r\\n    transaction.amount = amount;\\r\\n    transaction.signatureCount = 0;\\r\\n    \\r\\n    _pendingTransactions.push(transactionId);\\r\\n    emit TransactionCreated(msg.sender, to, amount, transactionId);\\r\\n}\\r\\n\\r\\n  function getPendingTransactions()\\r\\n    validOwner\\r\\n    view public\\r\\n    returns (uint[] memory, address[] memory, address[] memory, uint[] memory, uint8[] memory) {\\r\\n    uint length = _pendingTransactions.length;\\r\\n    \\r\\n    address[] memory fromAddresses = new address[](length);\\r\\n    address[] memory toAddresses = new address[](length);\\r\\n    uint[] memory amounts = new uint[](length);\\r\\n    uint8[] memory signatureCounts = new uint8[](length);\\r\\n    \\r\\n    for (uint i = 0; i < length; i++) {\\r\\n        Transaction storage transaction = _transactions[_pendingTransactions[i]];\\r\\n        fromAddresses[i] = transaction.from;\\r\\n        toAddresses[i] = transaction.to;\\r\\n        amounts[i] = transaction.amount;\\r\\n        signatureCounts[i] = transaction.signatureCount;\\r\\n    }\\r\\n\\r\\n    return (_pendingTransactions, fromAddresses, toAddresses, amounts, signatureCounts);\\r\\n}\\r\\n\\r\\n   function signTransaction(uint transactionId, string memory message, bytes memory signature) validOwner public {\\r\\n    // Verify if the signature is correct\\r\\n    bytes32 messageHash = keccak256(abi.encodePacked(message));\\r\\n    bytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\r\\n    \\r\\n    address signer = ECDSA.recover(ethSignedMessageHash, signature);\\r\\n    \\r\\n    // Ensure signer is a valid owner and the correct person signing the transaction\\r\\n    require(_owners[signer] == 1, \\\"Not a valid owner or signature does not match\\\");\\r\\n    require(signer == msg.sender, \\\"Signature mismatch with transaction initiator\\\");\\r\\n\\r\\n    Transaction storage transaction = _transactions[transactionId];\\r\\n    require(transaction.from != address(0), \\\"Transaction must exist\\\");\\r\\n    require(msg.sender != transaction.from, \\\"Transaction creator cannot sign\\\");\\r\\n    require(transaction.signatures[msg.sender] != 1, \\\"Cannot sign twice\\\");\\r\\n    \\r\\n    transaction.signatures[msg.sender] = 1;\\r\\n    transaction.signatureCount++;\\r\\n\\r\\n    emit TransactionSigned(msg.sender, transactionId);\\r\\n\\r\\n    if (transaction.signatureCount >= MIN_SIGNATURES) {\\r\\n        require(address(this).balance >= transaction.amount, \\\"Insufficient balance\\\");\\r\\n        (bool sent, bytes memory data) = transaction.to.call{value: transaction.amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        emit TransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionId);\\r\\n        deleteTransaction(transactionId);\\r\\n    }\\r\\n}\\r\\n\\r\\n    function deleteTransaction(uint transactionId)\\r\\n        validOwner\\r\\n        public {\\r\\n        uint8 replace = 0;\\r\\n        for (uint i = 0; i < _pendingTransactions.length; i++) {\\r\\n            if (replace == 1) {\\r\\n                _pendingTransactions[i-1] = _pendingTransactions[i];\\r\\n            } else if (transactionId == _pendingTransactions[i]) {\\r\\n                replace = 1;\\r\\n            }\\r\\n        }\\r\\n        _pendingTransactions.pop();\\r\\n        delete _transactions[transactionId];\\r\\n    }\\r\\n   function walletBalance()\\r\\n    public view\\r\\n        returns (uint) {\\r\\n        return address(this).balance;\\r\\n        }\\r\\n}\\r\\n\",\"keccak256\":\"0x6e69295a5b09262cc7962eea124d621501430bb4d7aeab066dfee74da2bb3f2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052601660809081527f4d756c7469205369676e617475726520506f7274616c0000000000000000000060a0526000906200003e90826200016e565b503480156200004c57600080fd5b5060018054336001600160a01b0319918216811783556000908152600260205260408120805460ff19168417905582546004805494850181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180546001600160a01b03909316929091169190911790556200023a565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000f457607f821691505b6020821081036200011557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016957600081815260208120601f850160051c81016020861015620001445750805b601f850160051c820191505b81811015620001655782815560010162000150565b5050505b505050565b81516001600160401b038111156200018a576200018a620000c9565b620001a2816200019b8454620000df565b846200011b565b602080601f831160018114620001da5760008415620001c15750858301515b600019600386901b1c1916600185901b17855562000165565b600085815260208120601f198616915b828110156200020b57888601518255948401946001909101908401620001ea565b50858210156200022a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611730806200024a6000396000f3fe6080604052600436106100795760003560e01c8062e9c006146100be57806316c12746146100e0578063173825d91461010b5780632ccb1b301461012b5780637065cb481461014b57806375d0c0dc1461016b578063cd0a314b1461018d578063d11db83f146101a8578063dd02ab69146101ce57600080fd5b366100b9577fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b8833346040516100af929190611229565b60405180910390a1005b600080fd5b3480156100ca57600080fd5b506100de6100d9366004611242565b6101ee565b005b3480156100ec57600080fd5b506100f561034a565b604051610102919061129f565b60405180910390f35b34801561011757600080fd5b506100de6101263660046112d5565b6103ac565b34801561013757600080fd5b506100de6101463660046112f0565b610564565b34801561015757600080fd5b506100de6101663660046112d5565b6106a3565b34801561017757600080fd5b5061018061079a565b604051610102919061133e565b34801561019957600080fd5b50604051478152602001610102565b3480156101b457600080fd5b506101bd610828565b6040516101029594939291906113a1565b3480156101da57600080fd5b506100de6101e93660046114c2565b610b25565b6001546001600160a01b031633148061021957503360009081526002602052604090205460ff166001145b61023e5760405162461bcd60e51b815260040161023590611559565b60405180910390fd5b6000805b6006548110156102e0578160ff166001036102a5576006818154811061026a5761026a611584565b9060005260206000200154600660018361028491906115b0565b8154811061029457610294611584565b6000918252602090912001556102ce565b600681815481106102b8576102b8611584565b906000526020600020015483036102ce57600191505b806102d8816115c3565b915050610242565b5060068054806102f2576102f26115dc565b6000828152602080822083016000199081018390559092019092559281526005909252506040812080546001600160a01b0319908116825560018201805490911690556002810191909155600301805460ff19169055565b606060048054806020026020016040519081016040528092919081815260200182805480156103a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610384575b5050505050905090565b6001546001600160a01b031633146103d65760405162461bcd60e51b8152600401610235906115f2565b6001600160a01b03811660009081526002602052604090205460ff1660011461043b5760405162461bcd60e51b815260206004820152601760248201527620b2323932b9b99034b9903737ba1030b71037bbb732b960491b6044820152606401610235565b6001600160a01b0381166000908152600260205260408120805460ff191690555b60045481101561056057816001600160a01b03166004828154811061048357610483611584565b6000918252602090912001546001600160a01b03160361054e57600480546104ad906001906115b0565b815481106104bd576104bd611584565b600091825260209091200154600480546001600160a01b0390921691839081106104e9576104e9611584565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610528576105286115dc565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610558816115c3565b91505061045c565b5050565b6001546001600160a01b031633148061058f57503360009081526002602052604090205460ff166001145b6105ab5760405162461bcd60e51b815260040161023590611559565b804710156105cb5760405162461bcd60e51b815260040161023590611618565b60038054600091826105dc836115c3565b909155506000818152600560205260408082208054336001600160a01b031991821681178355600180840180549093166001600160a01b038b16179092556002830188905560038301805460ff191690556006805492830181559094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018490559051929350917f41d8c89c4a25824354aa1f198d80d06f2f93f903a2d180d1ea20429a4678c4a49161069591879087908790611646565b60405180910390a150505050565b6001546001600160a01b031633146106cd5760405162461bcd60e51b8152600401610235906115f2565b6001600160a01b03811660009081526002602052604090205460ff16156107345760405162461bcd60e51b815260206004820152601b60248201527a20b2323932b9b99034b99030b63932b0b23c9030b71037bbb732b960291b6044820152606401610235565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b600080546107a79061166f565b80601f01602080910402602001604051908101604052809291908181526020018280546107d39061166f565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505081565b60015460609081908190819081906001600160a01b031633148061085e57503360009081526002602052604090205460ff166001145b61087a5760405162461bcd60e51b815260040161023590611559565b6006546000816001600160401b0381111561089757610897611437565b6040519080825280602002602001820160405280156108c0578160200160208202803683370190505b5090506000826001600160401b038111156108dd576108dd611437565b604051908082528060200260200182016040528015610906578160200160208202803683370190505b5090506000836001600160401b0381111561092357610923611437565b60405190808252806020026020018201604052801561094c578160200160208202803683370190505b5090506000846001600160401b0381111561096957610969611437565b604051908082528060200260200182016040528015610992578160200160208202803683370190505b50905060005b85811015610ab657600060056000600684815481106109b9576109b9611584565b9060005260206000200154815260200190815260200160002090508060000160009054906101000a90046001600160a01b03168683815181106109fe576109fe611584565b6001600160a01b03928316602091820292909201015260018201548651911690869084908110610a3057610a30611584565b60200260200101906001600160a01b031690816001600160a01b0316815250508060020154848381518110610a6757610a67611584565b60209081029190910101526003810154835160ff90911690849084908110610a9157610a91611584565b60ff909216602092830291909101909101525080610aae816115c3565b915050610998565b5060068484848484805480602002602001604051908101604052809291908181526020018280548015610b0857602002820191906000526020600020905b815481526020019060010190808311610af4575b505050505094509950995099509950995050505050509091929394565b6001546001600160a01b0316331480610b5057503360009081526002602052604090205460ff166001145b610b6c5760405162461bcd60e51b815260040161023590611559565b600082604051602001610b7f91906116a9565b604051602081830303815290604052805190602001209050600081604051602001610bd591907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b6040516020818303038152906040528051906020012090506000610bf98285610fbc565b6001600160a01b03811660009081526002602052604090205490915060ff16600114610c7d5760405162461bcd60e51b815260206004820152602d60248201527f4e6f7420612076616c6964206f776e6572206f72207369676e6174757265206460448201526c0decae640dcdee840dac2e8c6d609b1b6064820152608401610235565b6001600160a01b0381163314610ceb5760405162461bcd60e51b815260206004820152602d60248201527f5369676e6174757265206d69736d617463682077697468207472616e7361637460448201526c34b7b71034b734ba34b0ba37b960991b6064820152608401610235565b600086815260056020526040902080546001600160a01b0316610d495760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd858dd1a5bdb881b5d5cdd08195e1a5cdd60521b6044820152606401610235565b80546001600160a01b03163303610da25760405162461bcd60e51b815260206004820152601f60248201527f5472616e73616374696f6e2063726561746f722063616e6e6f74207369676e006044820152606401610235565b33600090815260048201602052604090205460ff16600103610dfa5760405162461bcd60e51b815260206004820152601160248201527043616e6e6f74207369676e20747769636560781b6044820152606401610235565b3360009081526004820160205260408120805460ff1916600117905560038201805460ff1691610e29836116c5565b91906101000a81548160ff021916908360ff160217905550507fac63e7e1dc16bccf900879686e74ca33eeb175b670e3aaa9d7e4ccf3781b7a7a3388604051610e73929190611229565b60405180910390a16003810154600260ff90911610610fb3578060020154471015610eb05760405162461bcd60e51b815260040161023590611618565b6001810154600282015460405160009283926001600160a01b03909116918381818185875af1925050503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b509150915081610f545760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610235565b8254600184015460028501546040517f394c4e679790fab24fd86614fd812811c9c835e4c475bdfc3d26fd0d6f7ca6fd93610f9f936001600160a01b03918216939116918e90611646565b60405180910390a1610fb0896101ee565b50505b50505050505050565b6000806000610fcb8585610fe2565b91509150610fd881611027565b5090505b92915050565b60008082516041036110185760208301516040840151606085015160001a61100c8782858561116f565b94509450505050611020565b506000905060025b9250929050565b600081600481111561103b5761103b6116e4565b036110435750565b6001816004811115611057576110576116e4565b0361109f5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610235565b60028160048111156110b3576110b36116e4565b036111005760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610235565b6003816004811115611114576111146116e4565b0361116c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610235565b50565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561119c5750600090506003611220565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111f0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661121957600060019250925050611220565b9150600090505b94509492505050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561125457600080fd5b5035919050565b600081518084526020808501945080840160005b838110156112945781516001600160a01b03168752958201959082019060010161126f565b509495945050505050565b6020815260006112b2602083018461125b565b9392505050565b80356001600160a01b03811681146112d057600080fd5b919050565b6000602082840312156112e757600080fd5b6112b2826112b9565b6000806040838503121561130357600080fd5b61130c836112b9565b946020939093013593505050565b60005b8381101561133557818101518382015260200161131d565b50506000910152565b602081526000825180602084015261135d81604085016020870161131a565b601f01601f19169190910160400192915050565b600081518084526020808501945080840160005b8381101561129457815187529582019590820190600101611385565b60a0815260006113b460a0830188611371565b6020838203818501526113c7828961125b565b915083820360408501526113db828861125b565b915083820360608501526113ef8287611371565b8481036080860152855180825282870193509082019060005b8181101561142757845160ff1683529383019391830191600101611408565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561146757611467611437565b604051601f8501601f19908116603f0116810190828211818310171561148f5761148f611437565b816040528093508581528686860111156114a857600080fd5b858560208301376000602087830101525050509392505050565b6000806000606084860312156114d757600080fd5b8335925060208401356001600160401b03808211156114f557600080fd5b818601915086601f83011261150957600080fd5b6115188783356020850161144d565b9350604086013591508082111561152e57600080fd5b508401601f8101861361154057600080fd5b61154f8682356020840161144d565b9150509250925092565b6020808252601190820152702737ba1030903b30b634b21037bbb732b960791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610fdc57610fdc61159a565b6000600182016115d5576115d561159a565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252600c908201526b2737ba1030b71037bbb732b960a11b604082015260600190565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600181811c9082168061168357607f821691505b6020821081036116a357634e487b7160e01b600052602260045260246000fd5b50919050565b600082516116bb81846020870161131a565b9190910192915050565b600060ff821660ff81036116db576116db61159a565b60010192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122051c6322f05da264a2522fc993e95ee45815ab4c684109737e7277bb7c8a9a07264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100795760003560e01c8062e9c006146100be57806316c12746146100e0578063173825d91461010b5780632ccb1b301461012b5780637065cb481461014b57806375d0c0dc1461016b578063cd0a314b1461018d578063d11db83f146101a8578063dd02ab69146101ce57600080fd5b366100b9577fd241e73300212f6df233a8e6d3146b88a9d4964e06621d54b5ff6afeba7b1b8833346040516100af929190611229565b60405180910390a1005b600080fd5b3480156100ca57600080fd5b506100de6100d9366004611242565b6101ee565b005b3480156100ec57600080fd5b506100f561034a565b604051610102919061129f565b60405180910390f35b34801561011757600080fd5b506100de6101263660046112d5565b6103ac565b34801561013757600080fd5b506100de6101463660046112f0565b610564565b34801561015757600080fd5b506100de6101663660046112d5565b6106a3565b34801561017757600080fd5b5061018061079a565b604051610102919061133e565b34801561019957600080fd5b50604051478152602001610102565b3480156101b457600080fd5b506101bd610828565b6040516101029594939291906113a1565b3480156101da57600080fd5b506100de6101e93660046114c2565b610b25565b6001546001600160a01b031633148061021957503360009081526002602052604090205460ff166001145b61023e5760405162461bcd60e51b815260040161023590611559565b60405180910390fd5b6000805b6006548110156102e0578160ff166001036102a5576006818154811061026a5761026a611584565b9060005260206000200154600660018361028491906115b0565b8154811061029457610294611584565b6000918252602090912001556102ce565b600681815481106102b8576102b8611584565b906000526020600020015483036102ce57600191505b806102d8816115c3565b915050610242565b5060068054806102f2576102f26115dc565b6000828152602080822083016000199081018390559092019092559281526005909252506040812080546001600160a01b0319908116825560018201805490911690556002810191909155600301805460ff19169055565b606060048054806020026020016040519081016040528092919081815260200182805480156103a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610384575b5050505050905090565b6001546001600160a01b031633146103d65760405162461bcd60e51b8152600401610235906115f2565b6001600160a01b03811660009081526002602052604090205460ff1660011461043b5760405162461bcd60e51b815260206004820152601760248201527620b2323932b9b99034b9903737ba1030b71037bbb732b960491b6044820152606401610235565b6001600160a01b0381166000908152600260205260408120805460ff191690555b60045481101561056057816001600160a01b03166004828154811061048357610483611584565b6000918252602090912001546001600160a01b03160361054e57600480546104ad906001906115b0565b815481106104bd576104bd611584565b600091825260209091200154600480546001600160a01b0390921691839081106104e9576104e9611584565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506004805480610528576105286115dc565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610558816115c3565b91505061045c565b5050565b6001546001600160a01b031633148061058f57503360009081526002602052604090205460ff166001145b6105ab5760405162461bcd60e51b815260040161023590611559565b804710156105cb5760405162461bcd60e51b815260040161023590611618565b60038054600091826105dc836115c3565b909155506000818152600560205260408082208054336001600160a01b031991821681178355600180840180549093166001600160a01b038b16179092556002830188905560038301805460ff191690556006805492830181559094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018490559051929350917f41d8c89c4a25824354aa1f198d80d06f2f93f903a2d180d1ea20429a4678c4a49161069591879087908790611646565b60405180910390a150505050565b6001546001600160a01b031633146106cd5760405162461bcd60e51b8152600401610235906115f2565b6001600160a01b03811660009081526002602052604090205460ff16156107345760405162461bcd60e51b815260206004820152601b60248201527a20b2323932b9b99034b99030b63932b0b23c9030b71037bbb732b960291b6044820152606401610235565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091556004805491820181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319169091179055565b600080546107a79061166f565b80601f01602080910402602001604051908101604052809291908181526020018280546107d39061166f565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505081565b60015460609081908190819081906001600160a01b031633148061085e57503360009081526002602052604090205460ff166001145b61087a5760405162461bcd60e51b815260040161023590611559565b6006546000816001600160401b0381111561089757610897611437565b6040519080825280602002602001820160405280156108c0578160200160208202803683370190505b5090506000826001600160401b038111156108dd576108dd611437565b604051908082528060200260200182016040528015610906578160200160208202803683370190505b5090506000836001600160401b0381111561092357610923611437565b60405190808252806020026020018201604052801561094c578160200160208202803683370190505b5090506000846001600160401b0381111561096957610969611437565b604051908082528060200260200182016040528015610992578160200160208202803683370190505b50905060005b85811015610ab657600060056000600684815481106109b9576109b9611584565b9060005260206000200154815260200190815260200160002090508060000160009054906101000a90046001600160a01b03168683815181106109fe576109fe611584565b6001600160a01b03928316602091820292909201015260018201548651911690869084908110610a3057610a30611584565b60200260200101906001600160a01b031690816001600160a01b0316815250508060020154848381518110610a6757610a67611584565b60209081029190910101526003810154835160ff90911690849084908110610a9157610a91611584565b60ff909216602092830291909101909101525080610aae816115c3565b915050610998565b5060068484848484805480602002602001604051908101604052809291908181526020018280548015610b0857602002820191906000526020600020905b815481526020019060010190808311610af4575b505050505094509950995099509950995050505050509091929394565b6001546001600160a01b0316331480610b5057503360009081526002602052604090205460ff166001145b610b6c5760405162461bcd60e51b815260040161023590611559565b600082604051602001610b7f91906116a9565b604051602081830303815290604052805190602001209050600081604051602001610bd591907b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b8152601c810191909152603c0190565b6040516020818303038152906040528051906020012090506000610bf98285610fbc565b6001600160a01b03811660009081526002602052604090205490915060ff16600114610c7d5760405162461bcd60e51b815260206004820152602d60248201527f4e6f7420612076616c6964206f776e6572206f72207369676e6174757265206460448201526c0decae640dcdee840dac2e8c6d609b1b6064820152608401610235565b6001600160a01b0381163314610ceb5760405162461bcd60e51b815260206004820152602d60248201527f5369676e6174757265206d69736d617463682077697468207472616e7361637460448201526c34b7b71034b734ba34b0ba37b960991b6064820152608401610235565b600086815260056020526040902080546001600160a01b0316610d495760405162461bcd60e51b8152602060048201526016602482015275151c985b9cd858dd1a5bdb881b5d5cdd08195e1a5cdd60521b6044820152606401610235565b80546001600160a01b03163303610da25760405162461bcd60e51b815260206004820152601f60248201527f5472616e73616374696f6e2063726561746f722063616e6e6f74207369676e006044820152606401610235565b33600090815260048201602052604090205460ff16600103610dfa5760405162461bcd60e51b815260206004820152601160248201527043616e6e6f74207369676e20747769636560781b6044820152606401610235565b3360009081526004820160205260408120805460ff1916600117905560038201805460ff1691610e29836116c5565b91906101000a81548160ff021916908360ff160217905550507fac63e7e1dc16bccf900879686e74ca33eeb175b670e3aaa9d7e4ccf3781b7a7a3388604051610e73929190611229565b60405180910390a16003810154600260ff90911610610fb3578060020154471015610eb05760405162461bcd60e51b815260040161023590611618565b6001810154600282015460405160009283926001600160a01b03909116918381818185875af1925050503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b509150915081610f545760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610235565b8254600184015460028501546040517f394c4e679790fab24fd86614fd812811c9c835e4c475bdfc3d26fd0d6f7ca6fd93610f9f936001600160a01b03918216939116918e90611646565b60405180910390a1610fb0896101ee565b50505b50505050505050565b6000806000610fcb8585610fe2565b91509150610fd881611027565b5090505b92915050565b60008082516041036110185760208301516040840151606085015160001a61100c8782858561116f565b94509450505050611020565b506000905060025b9250929050565b600081600481111561103b5761103b6116e4565b036110435750565b6001816004811115611057576110576116e4565b0361109f5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610235565b60028160048111156110b3576110b36116e4565b036111005760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610235565b6003816004811115611114576111146116e4565b0361116c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610235565b50565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561119c5750600090506003611220565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111f0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661121957600060019250925050611220565b9150600090505b94509492505050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561125457600080fd5b5035919050565b600081518084526020808501945080840160005b838110156112945781516001600160a01b03168752958201959082019060010161126f565b509495945050505050565b6020815260006112b2602083018461125b565b9392505050565b80356001600160a01b03811681146112d057600080fd5b919050565b6000602082840312156112e757600080fd5b6112b2826112b9565b6000806040838503121561130357600080fd5b61130c836112b9565b946020939093013593505050565b60005b8381101561133557818101518382015260200161131d565b50506000910152565b602081526000825180602084015261135d81604085016020870161131a565b601f01601f19169190910160400192915050565b600081518084526020808501945080840160005b8381101561129457815187529582019590820190600101611385565b60a0815260006113b460a0830188611371565b6020838203818501526113c7828961125b565b915083820360408501526113db828861125b565b915083820360608501526113ef8287611371565b8481036080860152855180825282870193509082019060005b8181101561142757845160ff1683529383019391830191600101611408565b50909a9950505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561146757611467611437565b604051601f8501601f19908116603f0116810190828211818310171561148f5761148f611437565b816040528093508581528686860111156114a857600080fd5b858560208301376000602087830101525050509392505050565b6000806000606084860312156114d757600080fd5b8335925060208401356001600160401b03808211156114f557600080fd5b818601915086601f83011261150957600080fd5b6115188783356020850161144d565b9350604086013591508082111561152e57600080fd5b508401601f8101861361154057600080fd5b61154f8682356020840161144d565b9150509250925092565b6020808252601190820152702737ba1030903b30b634b21037bbb732b960791b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610fdc57610fdc61159a565b6000600182016115d5576115d561159a565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252600c908201526b2737ba1030b71037bbb732b960a11b604082015260600190565b602080825260149082015273496e73756666696369656e742062616c616e636560601b604082015260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600181811c9082168061168357607f821691505b6020821081036116a357634e487b7160e01b600052602260045260246000fd5b50919050565b600082516116bb81846020870161131a565b9190910192915050565b600060ff821660ff81036116db576116db61159a565b60010192915050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122051c6322f05da264a2522fc993e95ee45815ab4c684109737e7277bb7c8a9a07264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1571,
        "contract": "contracts/Msig.sol:Msig",
        "label": "contractName",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1573,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1577,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1582,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_transactionIdx",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1585,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_allOwners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1603,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_transactions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Transaction)1598_storage)"
      },
      {
        "astId": 1606,
        "contract": "contracts/Msig.sol:Msig",
        "label": "_pendingTransactions",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_struct(Transaction)1598_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Msig.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)1598_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)1598_storage": {
        "encoding": "inplace",
        "label": "struct Msig.Transaction",
        "members": [
          {
            "astId": 1587,
            "contract": "contracts/Msig.sol:Msig",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1589,
            "contract": "contracts/Msig.sol:Msig",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1591,
            "contract": "contracts/Msig.sol:Msig",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1593,
            "contract": "contracts/Msig.sol:Msig",
            "label": "signatureCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 1597,
            "contract": "contracts/Msig.sol:Msig",
            "label": "signatures",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint8)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}